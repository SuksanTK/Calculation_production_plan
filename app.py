import streamlit as st
import pandas as pd
import numpy as np

def filter_production_data(df):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    """
    required_columns = ['ANET', 'QTY', 'Style', 'Asst', 'Zone', 'Issue date']
    for col in required_columns:
        if col not in df.columns:
            st.error(f"‚ùå Production file ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {col}")
            return None

    df['ANET'] = pd.to_numeric(df['ANET'], errors='coerce')
    df['QTY'] = pd.to_numeric(df['QTY'], errors='coerce')
    df['Issue date'] = pd.to_numeric(df['Issue date'], errors='coerce')

    df_filtered = df.dropna(subset=['QTY', 'Issue date'])
    df_filtered = df_filtered[df_filtered['QTY'] != 0].copy()

    condition = (df_filtered['ANET'] == 0) | (df_filtered['ANET'] >= df_filtered['QTY'] / 3)
    df_filtered = df_filtered[condition]

    df_filtered['linkk'] = df_filtered['Zone'].astype(str) + df_filtered['Style'].astype(str)
    return df_filtered


def calculate_capacity(df_production, df_capacity):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏° capacity
    """
    required_prod_cols = ['linkk', 'Issue date', 'Asst', 'Style', 'QTY', 'Zone']
    for col in required_prod_cols:
        if col not in df_production.columns:
            st.error(f"‚ùå Production Data ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {col}")
            return pd.DataFrame()

    required_cap_cols = ['linkk', 'Capacity']
    for col in required_cap_cols:
        if col not in df_capacity.columns:
            st.error(f"‚ùå Capacity Data ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {col}")
            return pd.DataFrame()

    df_merged = pd.merge(df_production, df_capacity, on='linkk', how='left')

    if df_merged['Capacity'].isnull().any():
        st.warning("‚ö†Ô∏è ‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ 'Capacity' ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")

    results_df = pd.DataFrame(columns=['Zone', 'Asst', 'Style', 'Cap_per_shift', 'Day', 'Shift', 'Allocated_QTY', 'linkk'])

    df_merged['Capacity'] = pd.to_numeric(df_merged['Capacity'], errors='coerce')

    for zone, group in df_merged.groupby('Zone'):
        current_day = 1
        remaining_A_capacity = 0
        remaining_B_capacity = 0
        group = group.sort_values(by='Issue date')

        for _, row in group.iterrows():
            asst = row['Asst']
            style = row['Style']
            QTY_to_allocate = row['QTY']
            cap_per_shift = row['Capacity']
            linkk = row['linkk']

            if pd.isna(cap_per_shift) or pd.isna(QTY_to_allocate):
                continue

            if remaining_A_capacity == 0 and remaining_B_capacity == 0:
                remaining_A_capacity = cap_per_shift
                remaining_B_capacity = cap_per_shift

            while QTY_to_allocate > 0:
                if remaining_A_capacity > 0:
                    allocated_QTY = min(QTY_to_allocate, remaining_A_capacity)
                    new_row = pd.DataFrame([{
                        'Zone': zone,
                        'Asst': asst,
                        'Style': style,
                        'Cap_per_shift': cap_per_shift,
                        'Day': current_day,
                        'Shift': 'A',
                        'Allocated_QTY': allocated_QTY,
                        'linkk': linkk
                    }])
                    results_df = pd.concat([results_df, new_row], ignore_index=True)
                    QTY_to_allocate -= allocated_QTY
                    remaining_A_capacity -= allocated_QTY
                
                if QTY_to_allocate > 0 and remaining_B_capacity > 0:
                    allocated_QTY = min(QTY_to_allocate, remaining_B_capacity)
                    new_row = pd.DataFrame([{
                        'Zone': zone,
                        'Asst': asst,
                        'Style': style,
                        'Cap_per_shift': cap_per_shift,
                        'Day': current_day,
                        'Shift': 'B',
                        'Allocated_QTY': allocated_QTY,
                        'linkk': linkk
                    }])
                    results_df = pd.concat([results_df, new_row], ignore_index=True)
                    QTY_to_allocate -= allocated_QTY
                    remaining_B_capacity -= allocated_QTY
                
                if QTY_to_allocate > 0:
                    current_day += 1
                    remaining_A_capacity = cap_per_shift
                    remaining_B_capacity = cap_per_shift
    
    return results_df


# --- Streamlit UI ---
st.set_page_config(page_title="Production Capacity Calculator", layout="wide")
st.title("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ Production Capacity")

st.markdown("""
‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV 2 ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:
1.  **Production Data:** ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏´‡∏•‡∏±‡∏Å
2.  **Capacity Data:** ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Capacity ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'linkk'
""")

uploaded_production_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Production Data (CSV)", type=["csv"], key="prod")
uploaded_capacity_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Capacity Data (CSV)", type=["csv"], key="capa")

if uploaded_production_file and uploaded_capacity_file:
    try:
        df_prod_master = pd.read_csv(uploaded_production_file)
        df_capacity = pd.read_csv(uploaded_capacity_file)

        st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Production Data (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)")
        st.dataframe(df_prod_master.head())

        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Capacity Data (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)")
        st.dataframe(df_capacity.head())

        if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                df_filtered = filter_production_data(df_prod_master.copy())
                
                if df_filtered is not None:
                    results_df = calculate_capacity(df_filtered, df_capacity)

                    if not results_df.empty:
                        st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ Production Capacity")
                        st.dataframe(results_df)

                        st.markdown("---")

                        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                        total_allocated = results_df['Allocated_QTY'].sum()
                        total_QTY = df_filtered['QTY'].sum()
                        st.markdown(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÑ‡∏î‡πâ:** {total_allocated:,.0f} units")
                        st.markdown(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß):** {total_QTY:,.0f} units")
                        st.markdown(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£:** { (total_allocated / total_QTY) * 100 if total_QTY > 0 else 0 :.2f}%")

                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                        csv = results_df.to_csv(index=False).encode('utf-8-sig')
                        st.download_button(
                            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (CSV)",
                            data=csv,
                            file_name="calculated_production_capacity.csv",
                            mime="text/csv",
                        )

    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {e}")
